import pickle

from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Router, F
from aiogram.enums.dice_emoji import DiceEmoji
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery
from aiogram import types
from aiogram.filters import Command
import datetime
from keyboard.ikb_actions_question import ikb_actions_qustion, ikb_actions_rebuild_qustion
from keyboard.inline_main_menu import ikb_main_menu
from keyboard.ikb_back import ikb_back
from keyboard.save_event import ikb_save
from keyboard.ikb_all_events import ikb_all_events
from filters.is_admin import Admin
from filters.is_new_user import New_User
from filters.Old_User import Old_user
from utils.db_api.quck_commands import event
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from states.fsm import Creation, Current, Current2, User
from keyboard.list_tests import ikb_all_tests, Choose_test
from keyboard.ikb_current_test import ikb_current_test
from keyboard.users_kb.ikb_get_all_tests import pick_a_test_user, ikb_all_tests_event_user
from keyboard.ikb_settings_test import ikb_settings_test
from keyboard.ikb_timer import ikb_timer, Choose_timeer
from keyboard.ikb_adding_questions import ikb_adding_questions
from keyboard.ikb_types_questions import ikb_types_of_questions
from keyboard.ikb_rebuilding_test import ikb_rebuild
from keyboard.list_questions import ikb_all_questions, Choose_quest
from keyboard.users_kb.ikb_start import ikb_start
from utils.db_api.quck_commands import tests, questions
from keyboard.users_kb.ikb_start_test import ikb_start_test
from keyboard.users_kb.ikb_back_code import ikb_back_code
from keyboard.users_kb.ikb_choose_quests import ikb_get_all_quests
from utils.db_api.quck_commands import results
from keyboard.users_kb.ikb_lks import ikb_lks, Current_lks
from utils.db_api.quck_commands import users
router = Router()

def serialize_datetime(dt):
    return pickle.dumps(dt).hex()

@router.message(
    Command("start"),
    New_User()
)
async def first(message: Message):
    await message.answer("üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞–∂–º–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç–∞–º", reply_markup=ikb_start())


@router.callback_query(F.data == "ikb_register_new", New_User())
async def second(query: CallbackQuery, state: FSMContext):
    await state.set_state(User.id)
    await state.update_data(id=query.from_user.id)
    await state.update_data(username=query.from_user.username)
    await query.message.answer("ü§ù–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å, –∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")



@router.message(User.id, New_User())
async def first(message: Message, state: FSMContext):
    await users.add_user(id=message.from_user.id, username=message.from_user.username, first_name=message.text, last_name="", status="user")
    name = message.text
    await state.update_data(first_name=name)
    await state.update_data(username="@" + message.from_user.username)
    await message.answer(f"üëã–ü—Ä–∏–≤–µ—Ç, {name}, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç–∞–º.", reply_markup=ikb_lks(message.from_user.id))
    await state.set_state(User.test_code)

@router.message(Command("start"), Old_user())
async def first(message: Message, state: FSMContext):
    user = await users.get_current_user(message.from_user.id)
    name = user.first_name
    await message.answer(f"""üëã–ü—Ä–∏–≤–µ—Ç, {name}, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç–∞–º.""", parse_mode=ParseMode.HTML, reply_markup=ikb_lks(message.from_user.id))
    await state.set_state(User.test_code)
    await state.update_data(first_name=name)
    await state.update_data(username="@" + message.from_user.username)



@router.callback_query(Current_lks.filter(F.cb=="ikb_lks"))
async def take_quest(query: CallbackQuery, callback_data: Current_lks):
    id = callback_data.id
    users_result = await results.get_all_results_id_user(id)
    if users_result:
        for result in users_result:
            current_test = await tests.get_current(id_test=result.id_test, id_event=0)
            name = current_test.name
            ev = await event.get_event(id=current_test.id_event)
            pluses = (result.result).count('1')
            minuses = (result.result).count('0')
            await query.message.answer(f"""–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: <b>{ev.name}</b>
    üìã–¢–µ—Å—Ç: <b>{name}</b>
            
    üéØ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è - <b>{pluses/(pluses+minuses)//1}</b>
    
    ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ - <b>{pluses}</b>
    
    ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ–≤—Ç–µ—Ç—ã - <b>{minuses}</b>
    
    
    #result""", parse_mode=ParseMode.HTML)
    else:
        await query.message.answer("‚õî–í—ã –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞")

    await query.message.answer("üîì–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç–∞–º", reply_markup=ikb_lks(query.message.from_user.id))


@router.message(User.test_code, Old_user())
async def start_test(message: Message, state: FSMContext):
    data = await state.get_data()
    code = message.text
    all_events = await event.get_all_events()
    flag = False
    for ev in all_events:
        print("code - ", code, "event pass - ", ev.password, code == ev.password, type(code), type(ev.password))
        if ev.password == int(code):
            current_ev = ev
            await state.update_data(current_event=ev.id_event)
            flag = True
            break
    if flag:
        kb = await ikb_all_tests_event_user(current_ev.id_event)
        await message.answer(f"""–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è <b>{current_ev.event_name}</b>""", parse_mode=ParseMode.HTML, reply_markup=kb)
        await state.set_state(User.current_test)

    else:
        await message.answer("‚ùå–ü–æ –¥–∞–Ω–Ω–æ–º—É –∫–æ–¥—É –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–Ω–æ —Ç–µ—Å—Ç–æ–≤", reply_markup=ikb_back_code())
        name = data.get("first_name")
        await message.answer(f"üëã–ü—Ä–∏–≤–µ—Ç, {name}, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç—É, —á—Ç–æ–±—ã –µ–≥–æ –ø—Ä–æ–π—Ç–∏.")



@router.callback_query(pick_a_test_user.filter(F.cb=="ikb_current_test"))
async def start_test(query: CallbackQuery, callback_data: pick_a_test_user, state: FSMContext):
    print("–ó–ê–®–õ–û")
    await state.update_data(current_test=callback_data.id)
    id_test = callback_data.id
    current_test = await tests.get_current(1, id_test=id_test)
    count_quests = await questions.get_questions(id_test)
    current_time = datetime.datetime.utcnow()
    current_time = current_time.replace(tzinfo=datetime.timezone.utc, microsecond=0)
    end_time = current_test.end_time.replace(microsecond=0)
    differ = end_time - current_time
    if current_time < end_time:
        await query.message.answer(f"""üé¨–ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –Ω–∞—á–∞–ª—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è?
üìù–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ - {current_test.name}
üïò–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ - {current_test.lifetime}
üïò–í—Ä–µ–º—è –¥–æ –∫–æ–Ω—Ü–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ - {differ}
üî¢–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ - {len(count_quests)}""", reply_markup=ikb_start_test(), parse_mode=ParseMode.HTML)
    else:
        await query.message.answer(f"‚õî–¢–µ—Å—Ç –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ")


@router.callback_query(F.data == "ikb_start_test", User.current_test, Old_user())
async def second(query: CallbackQuery, state: FSMContext):
    await state.set_state(User.choose_quest)
    data = await state.get_data()
    id_test = data.get("current_test")
    kb = await ikb_get_all_quests(id_test)
    test = await tests.get_current(1, id_test)
    time_to_answer = int(test.bound_time)
    end_time = datetime.datetime.utcnow() + datetime.timedelta(hours=3, minutes=time_to_answer)
    serialized_time = serialize_datetime(end_time)
    await state.update_data(time=serialized_time)
    await query.message.answer("‚úîÔ∏è–í—ã –Ω–∞—á–∞–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!")
    await query.message.answer(f"üëâ–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å", reply_markup=kb)


@router.callback_query(F.data == "ikb_back_code", User.test_code, Old_user())
async def second(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    name = data.get("first_name")
    await query.message.answer(f"üëã–ü—Ä–∏–≤–µ—Ç, {name}, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç—É, —á—Ç–æ–±—ã –µ–≥–æ –ø—Ä–æ–π—Ç–∏.")


