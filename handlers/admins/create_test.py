from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Router, F
from aiogram.enums.dice_emoji import DiceEmoji
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery
from aiogram import types
from aiogram.filters import Command
from keyboard.inline_main_menu import ikb_main_menu
from keyboard.ikb_back import ikb_back
from keyboard.save_event import ikb_save
from keyboard.ikb_all_events import ikb_all_events
from filters.is_admin import Admin
from utils.db_api.quck_commands import event
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from states.fsm import Creation, Current
from keyboard.ikb_all_events import ikb_all_events, Choose_event
from keyboard.ikb_current_test import ikb_current_test
from keyboard.ikb_settings_test import ikb_settings_test
from keyboard.ikb_timer import ikb_timer, Choose_timeer
from keyboard.ikb_adding_questions import ikb_adding_questions
from keyboard.ikb_types_questions import ikb_types_of_questions
from keyboard.list_tests import ikb_all_tests
from keyboard.ikb_delete_event import ikb_delete_event
from utils.db_api.quck_commands import tests
router = Router()


@router.callback_query(Choose_event.filter(F.cb=="ikb_choose"))
async def second(query: CallbackQuery, callback_data: Choose_event, state: FSMContext):
    data = await event.get_event(callback_data.id)
    name = data.event_name
    await query.message.answer(f"‚ö° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è <b>{name}</b>", reply_markup=ikb_current_test(), parse_mode=ParseMode.HTML)
    await state.set_state(Current.event)
    await state.update_data(event_id=callback_data.id)
    await state.update_data(event=name)

#-------------------------------------- –£–¥–∞–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ -------------------------------


@router.callback_query(Current.event, F.data == "delete_event")
async def add_test(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    name = data.get("event")
    await query.message.answer(f"""üóëÔ∏è–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ <b>—É–¥–∞–ª–∏—Ç—å</b> –º–µ—Ä–æ–ø–∏—Ä–∏—è—Ç–∏–µ <b>{name}</b>?""", reply_markup=ikb_delete_event(), parse_mode=ParseMode.HTML)#parse_mode_–±—ã–ª


@router.callback_query(Current.event, F.data == "ikb_delete_forever_event")
async def add_test(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    name = data.get("event")
    event_id = data.get("event_id")
    try:
        await event.delete_event(event_id)
        await query.message.answer(f"""üóëÔ∏è–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ <b>{name}</b> –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ""", parse_mode=ParseMode.HTML)
        await query.message.answer("üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –∞–¥–º–∏–Ω, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=ikb_main_menu())
        await state.clear()
    except:
        await query.message.answer("‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–µ")


@router.callback_query(Current.event, F.data == "ikb_back_from_delete")
async def add_test(query: CallbackQuery, state: FSMContext):
    await query.message.answer("üóëÔ∏è–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –∞–¥–º–∏–Ω, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=ikb_main_menu())
    await state.clear()


#----------------------------- –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–æ–≤ ---------------------------------------------

@router.callback_query(Current.event, F.data == "create_test")
async def add_test(query: CallbackQuery, state: FSMContext):
    await query.message.answer("""üõ†Ô∏è–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ä–æ—Å–∞:
üîì*–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞* –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç—É
üïí*–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ* —Ç–µ—Å—Ç–∞
üïí*–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è* —Ç–µ—Å—Ç–∞""", reply_markup=ikb_settings_test(), parse_mode=ParseMode.MARKDOWN_V2)


@router.callback_query(Current.event, F.data == "access_code")
async def add_test2(query: CallbackQuery, state: FSMContext):
    await state.set_state(Current.setting_code)
    await query.message.answer("üîì–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç—É, *–∫–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º*", reply_markup=ikb_back(), parse_mode=ParseMode.MARKDOWN_V2)


@router.callback_query(Current.event, F.data == "time_to_answer")
async def add_test2(query: CallbackQuery, state: FSMContext):
    await state.set_state(Current.setting_passing)
    await query.message.answer("üïí–í—ã–±–µ—Ä–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞, *–≤—ã—Ä–∞–∑–∏—Ç–µ –≤ –º–∏–Ω—É—Ç–∞—Ö*", reply_markup=ikb_back(),  parse_mode=ParseMode.MARKDOWN_V2)


@router.callback_query(Current.event, F.data == "time_of_test")
async def add_test2(query: CallbackQuery, state: FSMContext):
    await state.set_state(Current.setting_time)
    await query.message.answer("üïí–í—ã–±–µ—Ä–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞, *–≤—ã—Ä–∞–∑–∏—Ç–µ –≤ –º–∏–Ω—É—Ç–∞—Ö*", reply_markup=ikb_timer(), parse_mode=ParseMode.MARKDOWN_V2)


@router.message(Current.setting_passing, Admin())
async def add_test3(message: Message, state: FSMContext):
    code = message.text
    try:
        code = int(code)
        if code > 0:
            code = int(code)
            await state.update_data(setting_passing=code)
            await message.answer(f"‚úÖ–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ *—É—Å–ø–µ—à–Ω–æ* —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ *{code}*", parse_mode=ParseMode.MARKDOWN_V2)
            await message.answer("""üîì–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç—É
üïí–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
üïí–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞""", reply_markup=ikb_settings_test())
        else:
            await message.answer("‚ùå–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å *–Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º*", parse_mode=ParseMode.MARKDOWN_V2)
            await message.answer("""üîì–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç—É
üïí–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
üïí–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞""", reply_markup=ikb_settings_test())
        await state.set_state(Current.event)
    except:
        await state.set_state(Current.event)
        await message.answer("‚ùå–í—Ä–µ–º—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ *—á–∏—Å–ª–µ–Ω–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞*")
        await message.answer("""üîì–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç—É
üïí–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
üïí–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞""", reply_markup=ikb_settings_test())


@router.message(Current.setting_code, Admin())
async def add_test3(message: Message, state: FSMContext):
    code = message.text
    try:
        code = int(code)
        if code > 0:
            is_unique = True
            data_tests = await tests.get_all_tests()
            for test in data_tests:
                if test.token == code:
                    is_unique = False
                    break
            if is_unique:
                code = int(code)
                await state.update_data(setting_code=code)
                await message.answer(f"‚úÖ–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç—É *—É—Å–ø–µ—à–Ω–æ* —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {code}", parse_mode=ParseMode.MARKDOWN_V2)
                await message.answer("""üîì–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç—É
üïí–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
üïí–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞""", reply_markup=ikb_settings_test())

            else:
                await message.answer("‚ùå–î–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ *—É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è* –≤ –¥—Ä—É–≥–æ–º —Ç–µ—Å—Ç–µ\. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥", parse_mode=ParseMode.MARKDOWN_V2 )
                await message.answer("""üîì–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç—É
üïí–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
üïí–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞""", reply_markup=ikb_settings_test())
        else:
            await message.answer("‚ùå–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å *–Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º*", parse_mode=ParseMode.MARKDOWN_V2)
            await message.answer("""üîì–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç—É
üïí–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
üïí–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞""", reply_markup=ikb_settings_test())
        await state.set_state(Current.event)
    except:
        await state.set_state(Current.event)
        await message.answer("‚ùå–ö–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ *—á–∏—Å–ª–µ–Ω–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞*", parse_mode=ParseMode.MARKDOWN_V2)
        await message.answer("""üîì–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç—É
üïí–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
üïí–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞""", reply_markup=ikb_settings_test())


@router.callback_query(Current.setting_time, Choose_timeer.filter(F.cb=="ikb_time"))
async def add_test2(query: CallbackQuery, state: FSMContext, callback_data: Choose_timeer):
    await state.update_data(setting_time=callback_data.id)

    await query.message.answer(f"‚úÖ–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ *{callback_data.id}*", parse_mode=ParseMode.MARKDOWN_V2)
    await query.message.answer("""üîì–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç—É
üïí–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
üïí–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞""", reply_markup=ikb_settings_test())
    await state.set_state(Current.event)

#---------------------------------- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–¥ --------------------------------------
async def get_unique_key(keys):
    for i in range(1000):
        if i not in keys:
            return i
    else: return None


@router.callback_query(Current.event, F.data == "ikb_create_questions")
async def add_test2(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    id = data.get("event_id")
    code = data.get("setting_code")
    passing = data.get("setting_passing")
    time = data.get("setting_time")

    if code and passing and time:
        try:
            all_test = await tests.get_all_tests()
            values = list()
            for t in all_test:
                values.append(int(t.id_test))
            id_test = await get_unique_key(values)
            await state.update_data(current_test=id_test)
            await tests.add_test(id_event=id, setting_code=code, setting_time=time, setting_passing=passing, id_test=id_test)
            await query.message.answer("‚ùî–ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –≤–æ–ø—Ä–æ—Å–∞–º–∏", reply_markup=ikb_adding_questions())
            await state.update_data(setting_code="")
            await state.update_data(setting_passing="")
            await state.update_data(setting_time="")
        except Exception as err:
            await query.message.answer("‚ùå–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=ikb_back())
            print(err)
    else:
        await query.message.answer(f"""üîì–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ - <b>{code if code else "‚ùå–ü—Ä–æ–ø—É—â–µ–Ω–Ω–æ"}</b>
üïò–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ - <b>{time if time else "‚ùå–ü—Ä–æ–ø—É—â–µ–Ω–Ω–æ"}</b>
üïò–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ - <b>{passing if passing else "‚ùå–ü—Ä–æ–ø—É—â–µ–Ω–Ω–æ"}</b>

‚úçÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞""", reply_markup=ikb_settings_test(), parse_mode=ParseMode.HTML)




@router.callback_query(Current.event, F.data == "create_question")
async def add_test2(query: CallbackQuery, state: FSMContext):
    await query.message.answer("""‚úèÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞:
1Ô∏è‚É£1 —Ç–∏–ø \- –≤–æ–ø—Ä–æ—Å —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
üî¢2 —Ç–∏–ø \- –≤–æ–ø—Ä–æ—Å —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º""", reply_markup=ikb_types_of_questions(), parse_mode=ParseMode.MARKDOWN_V2)


@router.callback_query(Current.event, F.data == "list_tests")
async def add_test2(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    id = data.get("event_id")
    print("id_event - ", id)

    kb = await ikb_all_tests(id)
    await query.message.answer("üìã–°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤", reply_markup=kb)


