from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Router, F
from aiogram.enums.dice_emoji import DiceEmoji
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery
from aiogram import types
from aiogram.filters import Command

from loader import bot
from keyboard.inline_main_menu import ikb_main_menu
from keyboard.ikb_back import ikb_back
from keyboard.save_event import ikb_save
from keyboard.ikb_all_events import ikb_all_events
from filters.is_admin import Admin
from set_logs1.logger_all1 import log_exceptions1

from utils.db_api.quck_commands import event
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from states.fsm import Creation, Current
from keyboard.ikb_all_events import ikb_all_events, Choose_event
from keyboard.ikb_current_test import ikb_current_test
from keyboard.ikb_settings_test import ikb_settings_test
from keyboard.ikb_timer import ikb_timer, Choose_timeer
from keyboard.ikb_adding_questions import ikb_adding_questions
from keyboard.ikb_types_questions import ikb_types_of_questions
from keyboard.list_tests import ikb_all_tests
from keyboard.ikb_delete_event import ikb_delete_event
from keyboard.ikb_notifications_test import ikb_notifications
from keyboard.ikb_notifications_choose import ikb_notifications_choose
from keyboard.ikb_notifications_test import Notifications_test
from keyboard.ikb_back import ikb_back_actions_event
from utils.db_api.quck_commands import tests, results, users
router = Router()




@router.callback_query(Choose_event.filter(F.cb=="ikb_choose"))
async def second(query: CallbackQuery, callback_data: Choose_event, state: FSMContext):
    data = await event.get_event(callback_data.id)
    name = data.event_name
    ev = await event.get_event(callback_data.id)
    await query.message.answer(f"""‚ö° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è <b>{name}</b>

‚ö°–¢–µ–∫—É—â–∏–π –∫–æ–¥ –¥–æ—É—Å—Ç—É–ø–∞ <code>{ev.password if ev.password else "‚õî–ü–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"}</code>""", reply_markup=ikb_current_test(), parse_mode=ParseMode.HTML)
    await state.set_state(Current.event)
    await state.update_data(event_id=callback_data.id)
    await state.update_data(event=name)

#---------------------------- Access Code ------------------------------------------------------


@router.callback_query(Current.event, F.data == "set_password")
async def add_test2(query: CallbackQuery, state: FSMContext):
    await state.set_state(Current.setting_code)
    data = await state.get_data()
    ev = await event.get_event(data.get("event_id"))

    await query.message.answer(f"""üîì–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç–∞–º –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, <b>–∫–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—è—Ç–∏–∑–Ω–∞—á–Ω—ã–º —á–∏—Å–ª–æ–º</b>

‚ö°–¢–µ–∫—É—â–∏–π –∫–æ–¥ –¥–æ—É—Å—Ç—É–ø–∞ <code>{ev.password if ev.password else "‚õî–ü–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"}</code>""", reply_markup=ikb_back_actions_event(), parse_mode=ParseMode.HTML)


@router.message(Current.setting_code, Admin())
async def add_test3(message: Message, state: FSMContext):
    code = message.text
    data = await state.get_data()
    name = data.get("event")
    event_id = data.get("event_id")
    ev = await event.get_event(data.get("event_id"))
    try:
        code = int(code)
        if code > 9999 and code < 100000:
            is_unique = True
            data_events = await event.get_all_events()
            for ev in data_events:
                if ev.password == code:
                    is_unique = False
                    break
            if is_unique:
                code = int(code)
                await event.update_code(event_id=event_id, code=code)
                await message.answer(f"""‚úÖ–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é *—É—Å–ø–µ—à–Ω–æ* —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {code}""", parse_mode=ParseMode.MARKDOWN_V2)
                ev = await event.get_event(event_id)
                await message.answer(f"""‚ö° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è <b>{name}</b>

‚ö°–¢–µ–∫—É—â–∏–π –∫–æ–¥ –¥–æ—É—Å—Ç—É–ø–∞ <code>{ev.password if ev.password else "‚õî–ü–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"}</code>""", reply_markup=ikb_current_test(), parse_mode=ParseMode.HTML)
                await state.set_state(Current.event)
            else:
                await message.answer("‚ùå–î–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ *—É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è* –≤ –¥—Ä—É–≥–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏\. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥", parse_mode=ParseMode.MARKDOWN_V2 )
                await message.answer(f"""‚ö° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è <b>{name}</b>
                
‚ö°–¢–µ–∫—É—â–∏–π –∫–æ–¥ –¥–æ—É—Å—Ç—É–ø–∞ <code>{ev.password if ev.password else "‚õî–ü–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"}</code>""", reply_markup=ikb_current_test(), parse_mode=ParseMode.HTML)
                await state.set_state(Current.event)
        else:
            await message.answer("‚ùå–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å *–ø—è—Ç–∏–∑–Ω–∞—á–Ω—ã–º —á–∏—Å–ª–æ–º*", parse_mode=ParseMode.MARKDOWN_V2)
            await message.answer(f"""‚ö° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è <b>{name}</b>
            
‚ö°–¢–µ–∫—É—â–∏–π –∫–æ–¥ –¥–æ—É—Å—Ç—É–ø–∞ <code>{ev.password if ev.password else "‚õî–ü–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"}</code>""", reply_markup=ikb_current_test(), parse_mode=ParseMode.HTML)
            await state.set_state(Current.event)
    except Exception as err:
        await state.set_state(Current.event)
        print(err)
        await message.answer("‚ùå–ö–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ *—á–∏—Å–ª–µ–Ω–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞*", parse_mode=ParseMode.MARKDOWN_V2)
        await message.answer(f"""‚ö° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è <b>{name}</b>
        
‚ö°–¢–µ–∫—É—â–∏–π –∫–æ–¥ –¥–æ—É—Å—Ç—É–ø–∞ <code>{ev.password if ev.password else "‚õî–ü–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"}</code>""", reply_markup=ikb_current_test(), parse_mode=ParseMode.HTML)
        await state.set_state(Current.event)


#---------------------------- Notifications ---------------------------------------------------

@router.callback_query(F.data == "get_stat", Current.event)
async def second(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    id_event = data.get("event_id")
    kb = await ikb_notifications(id_event=id_event)
    await query.message.answer(f"""üîî–í—ã –≤ –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤
–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞ –ø—Ä–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞.
<b>–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã</b> –∏ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–µ—Å—Ç–∞""", reply_markup=kb, parse_mode=ParseMode.HTML)


@router.callback_query(Notifications_test.filter(F.cb=="ikb_notifications"), Current.event)
async def second(query: CallbackQuery, callback_data: Notifications_test, state: FSMContext):
    test = await tests.get_current(id_test=callback_data.id, id_event=0)
    await state.update_data(current_test=callback_data.id)
    kb = await ikb_notifications_choose(query.from_user.id, callback_data.id)
    await query.message.answer(f"""üîî–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ {test.name}""", reply_markup=kb)


@router.callback_query(F.data == "ikb_check_results_admin", Current.event)
async def check_reuslts_admin(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    id_test = data.get("current_test")
    current_test = await tests.get_current(id_test=id_test, id_event=1)
    res = await results.get_all_results_id_test(id_test)
    if not res:
        await query.message.answer("‚ùå–¢–µ—Å—Ç –ø–æ–∫–∞ –Ω–µ –±—ã–ª –Ω–∏–∫–µ–º –ø—Ä–æ–π–¥–µ–Ω")

    for result in res:
        current = [m for m in result.result]
        print(current)
        pluses = current.count("1")
        minuses = current.count("0")
        user = await users.get_current_user(result.id_user)
        name = user.first_name
        username = "@" + user.username
        await query.message.answer(f"""üìä–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{username if username else "–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ"}</b>

–ò–º—è <b>{name}</b>

–¢–µ—Å—Ç <b>{current_test.name}</b>:

‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ - {pluses}
    
‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ - {minuses}
    
üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - {(pluses / len(current) * 100) // 1} %
    
    
#results""", parse_mode=ParseMode.HTML)


@router.callback_query(F.data == "ikb_send", Current.event)
async def check_reuslts_admin(query: CallbackQuery, state: FSMContext):
    admin_id = query.from_user.id
    data = await state.get_data()
    id_test = data.get("current_test")
    await tests.add_notifications(id_test,admin_id)
    new_kb = await ikb_notifications_choose(query.from_user.id, id_test)
    await bot.edit_message_reply_markup(
        chat_id=query.message.chat.id,
        message_id=query.message.message_id,
        reply_markup=new_kb,
        inline_message_id=query.inline_message_id
    )


@router.callback_query(F.data == "ikb_dont_send", Current.event)
async def check_reuslts_admin(query: CallbackQuery, state: FSMContext):
    admin_id = query.from_user.id
    data = await state.get_data()
    id_test = data.get("current_test")
    await tests.delete_notifications(id_test, admin_id)
    new_kb = await ikb_notifications_choose(query.from_user.id, id_test)
    await bot.edit_message_reply_markup(
        chat_id=query.message.chat.id,
        message_id=query.message.message_id,
        reply_markup=new_kb,
        inline_message_id=query.inline_message_id
    )

#-------------------------------------- –£–¥–∞–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ -------------------------------

@router.callback_query(Current.event, F.data == "delete_event")
async def add_test(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    name = data.get("event")
    await query.message.answer(f"""üóëÔ∏è–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ <b>—É–¥–∞–ª–∏—Ç—å</b> –º–µ—Ä–æ–ø–∏—Ä–∏—è—Ç–∏–µ <b>{name}</b>?""", reply_markup=ikb_delete_event(), parse_mode=ParseMode.HTML)#parse_mode_–±—ã–ª


@router.callback_query(Current.event, F.data == "ikb_delete_forever_event")
async def add_test(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    name = data.get("event")
    event_id = data.get("event_id")
    try:
        await event.delete_event(event_id)
        await query.message.answer(f"""üóëÔ∏è–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ <b>{name}</b> –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ""", parse_mode=ParseMode.HTML)
        await query.message.answer("üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –∞–¥–º–∏–Ω, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=ikb_main_menu())
        await state.clear()
    except Exception as err:
        await log_exceptions1("delete_event", "ERROR", "create_test.py", 214, err, query.from_user.id)

        await query.message.answer("‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–µ")


@router.callback_query(Current.event, F.data == "ikb_back_from_delete")
async def add_test(query: CallbackQuery, state: FSMContext):
    await query.message.answer("üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –∞–¥–º–∏–Ω, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=ikb_main_menu())
    await state.clear()


#----------------------------- –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–æ–≤ ---------------------------------------------

@router.callback_query(Current.event, F.data == "create_test")
async def add_test(query: CallbackQuery, state: FSMContext):
    await query.message.answer("""üõ†Ô∏è–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ä–æ—Å–∞:
üìù*–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞* 
üïí*–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ* —Ç–µ—Å—Ç–∞
üïí*–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è* —Ç–µ—Å—Ç–∞""", reply_markup=ikb_settings_test(), parse_mode=ParseMode.MARKDOWN_V2)

@router.callback_query(Current.event, F.data == "ikb_name_for_test")
async def add_test2(query: CallbackQuery, state: FSMContext):
    await state.set_state(Current.setting_name)
    await query.message.answer("üìù–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è —Ç–µ—Å—Ç–∞, *–∏–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª—é–±—ã–µ —Å–∏–º–≤–æ–ª—ã*", reply_markup=ikb_back(), parse_mode=ParseMode.MARKDOWN_V2)


@router.callback_query(Current.event, F.data == "time_to_answer")
async def add_test2(query: CallbackQuery, state: FSMContext):
    await state.set_state(Current.setting_passing)
    await query.message.answer("üïí–í—ã–±–µ—Ä–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞, *–≤—ã—Ä–∞–∑–∏—Ç–µ –≤ –º–∏–Ω—É—Ç–∞—Ö*", reply_markup=ikb_back(),  parse_mode=ParseMode.MARKDOWN_V2)


@router.callback_query(Current.event, F.data == "time_of_test")
async def add_test2(query: CallbackQuery, state: FSMContext):
    await state.set_state(Current.setting_time)
    await query.message.answer("üïí–í—ã–±–µ—Ä–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞, *–≤—ã—Ä–∞–∑–∏—Ç–µ –≤ –º–∏–Ω—É—Ç–∞—Ö*", reply_markup=ikb_timer(), parse_mode=ParseMode.MARKDOWN_V2)


@router.message(Current.setting_name, Admin())
async def add_test3(message: Message, state: FSMContext):
    code = message.text
    await state.update_data(setting_name=code)
    data = await state.get_data()
    setting_passing = data.get("setting_passing")
    setting_time = data.get("setting_time")
    await message.answer(f"‚úÖ–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ <b>{code}</b>", parse_mode=ParseMode.HTML)
    await message.answer(f"""üìù–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ <b>{code}</b>
üïí–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ <b>{setting_passing if setting_passing else "‚ùå–ü–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"}</b>
üïí–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ <b>{setting_time if setting_time else "‚ùå–ü–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"}</b>""", reply_markup=ikb_settings_test(), parse_mode=ParseMode.HTML)
    await state.set_state(Current.event)



@router.message(Current.setting_passing, Admin())
async def add_test3(message: Message, state: FSMContext):
    code = message.text
    data = await state.get_data()
    setting_name = data.get('setting_name')
    setting_time = data.get("setting_time")
    setting_passing = data.get("setting_passing")

    try:
        code = int(code)
        if code > 0:
            code = int(code)
            await state.update_data(setting_passing=code)
            await message.answer(f"‚úÖ–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ *—É—Å–ø–µ—à–Ω–æ* —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ *{code}*", parse_mode=ParseMode.MARKDOWN_V2)
            await message.answer(f"""üìù–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ <b>{setting_name if setting_name else "‚ùå–ü–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"}</b>
üïí–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ <b>{code} –º–∏–Ω—É—Ç</b>
üïí–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ <b>{setting_time if setting_time else "‚ùå–ü–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"}</b>""", reply_markup=ikb_settings_test(), parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await message.answer("‚ùå–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å *–Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º*", parse_mode=ParseMode.MARKDOWN_V2)
            await message.answer(f"""üìù–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ <b>{setting_name if setting_name else "‚ùå–ü–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"}</b>
üïí–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ <b>{setting_passing if setting_passing else "‚ùå–ü–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"}</b>
üïí–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ <b>{setting_time if setting_time else "‚ùå–ü–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"}</b>""", reply_markup=ikb_settings_test(), parse_mode=ParseMode.MARKDOWN_V2)
        await state.set_state(Current.event)
    except:
        await state.set_state(Current.event)
        await message.answer("‚ùå–í—Ä–µ–º—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ *—á–∏—Å–ª–µ–Ω–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞*")
        await message.answer(f"""üìù–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ <b>{setting_name if setting_name else "‚ùå–ü–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"}</b>
üïí–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ <b>{setting_passing if setting_passing else "‚ùå–ü–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"}</b>
üïí–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ <b>{setting_time if setting_time else "‚ùå–ü–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"}</b>""", reply_markup=ikb_settings_test(), parse_mode=ParseMode.MARKDOWN_V2)


@router.callback_query(Current.setting_time, Choose_timeer.filter(F.cb=="ikb_time"))
async def add_test2(query: CallbackQuery, state: FSMContext, callback_data: Choose_timeer):
    await state.update_data(setting_time=callback_data.id)

    await query.message.answer(f"‚úÖ–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ *{callback_data.id}*", parse_mode=ParseMode.MARKDOWN_V2)
    await query.message.answer("""üìù*–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞* 
üïí*–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ* —Ç–µ—Å—Ç–∞
üïí*–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è* —Ç–µ—Å—Ç–∞""", reply_markup=ikb_settings_test(), parse_mode=ParseMode.MARKDOWN_V2)
    await state.set_state(Current.event)

#---------------------------------- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–¥ --------------------------------------
async def get_unique_key(keys):
    for i in range(1000):
        if i not in keys:
            return i
    else: return None


@router.callback_query(Current.event, F.data == "ikb_create_questions")
async def add_test2(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    id = data.get("event_id")
    passing = data.get("setting_passing")
    time = data.get("setting_time")
    test_name = data.get("setting_name")

    if passing and time and test_name:
        try:
            all_test = await tests.get_all_tests()
            values = list()
            for t in all_test:
                values.append(int(t.id_test))
            id_test = await get_unique_key(values)
            await state.update_data(current_test=id_test)
            await tests.add_test(id_event=id, setting_time=time, setting_passing=passing, id_test=id_test, name=test_name)
            await query.message.answer("‚ùî–ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –≤–æ–ø—Ä–æ—Å–∞–º–∏", reply_markup=ikb_adding_questions())
            await state.update_data(setting_passing="")
            await state.update_data(setting_time="")
            await state.update_data(setting_name="")
        except Exception as err:
            await query.message.answer("‚ùå–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=ikb_back())
            await log_exceptions1("create_test_final", "ERROR", "create_test.py", 339, err, query.from_user.id)
    else:
        await query.message.answer(f"""üìù–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ - <b>{test_name if test_name else "‚ùå–ü—Ä–æ–ø—É—â–µ–Ω–Ω–æ"}</b> 
üïò–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ - <b>{time if time else "‚ùå–ü—Ä–æ–ø—É—â–µ–Ω–Ω–æ"}</b>
üïò–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ - <b>{passing if passing else "‚ùå–ü—Ä–æ–ø—É—â–µ–Ω–Ω–æ"}</b>

‚úçÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞""", reply_markup=ikb_settings_test(), parse_mode=ParseMode.HTML)




@router.callback_query(Current.event, F.data == "create_question")
async def add_test2(query: CallbackQuery, state: FSMContext):
    await query.message.answer("""‚úèÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞:
1Ô∏è‚É£1 —Ç–∏–ø \- –≤–æ–ø—Ä–æ—Å —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
üî¢2 —Ç–∏–ø \- –≤–æ–ø—Ä–æ—Å —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º""", reply_markup=ikb_types_of_questions(), parse_mode=ParseMode.MARKDOWN_V2)


@router.callback_query(Current.event, F.data == "list_tests")
async def add_test2(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    id = data.get("event_id")
    kb = await ikb_all_tests(id)
    await query.message.answer("üìã–°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤", reply_markup=kb)


