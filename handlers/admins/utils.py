from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Router, F
from aiogram.enums.dice_emoji import DiceEmoji
from aiogram.types import Message, InlineKeyboardButton
from aiogram import types
from aiogram.filters import Command

from keyboard.ikb_actions_question import ikb_actions_qustion
from keyboard.ikb_all_events import ikb_all_events
from keyboard.ikb_current_test import ikb_current_test
from keyboard.ikb_rebuilding_test import ikb_rebuild
from keyboard.ikb_settings_test import ikb_settings_test
from keyboard.ikb_types_questions import ikb_types_of_questions
from keyboard.inline_main_menu import ikb_main_menu
from keyboard.ikb_back import ikb_back
from filters.is_admin import Admin
from keyboard.list_questions import ikb_all_questions
from keyboard.list_tests import ikb_all_tests
from utils.db_api.quck_commands import event
from aiogram.fsm.context import FSMContext
from states.fsm import Current, Current2
from aiogram.fsm.state import StatesGroup, State
router = Router()



@router.callback_query(F.data == "ikb_back", Current.event)
async def second(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –¥–æ—Ä–æ–≥–æ–π –∞–¥–º–∏–Ω, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=ikb_main_menu())


@router.callback_query(F.data == "ikb_back_list_events", Current.event)
async def second(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    ikb = await ikb_all_events(callback.from_user.id)
    await callback.message.answer('üìÖ–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', reply_markup=ikb)



@router.callback_query(F.data == "ikb_back_choose_type", Current.event)
async def second(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("""‚úèÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞:
1Ô∏è‚É£1 —Ç–∏–ø \- –≤–æ–ø—Ä–æ—Å —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
üî¢2 —Ç–∏–ø \- –≤–æ–ø—Ä–æ—Å —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º""", reply_markup=ikb_types_of_questions(),parse_mode=ParseMode.MARKDOWN_V2)


@router.callback_query(F.data == "ikb_back_choose_type", Current2.event)
async def second(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("""‚úèÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞:
1Ô∏è‚É£1 —Ç–∏–ø \- –≤–æ–ø—Ä–æ—Å —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
üî¢2 —Ç–∏–ø \- –≤–æ–ø—Ä–æ—Å —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º""", reply_markup=ikb_types_of_questions(), parse_mode=ParseMode.MARKDOWN_V2)
    await state.update_data(text=None)
    await state.update_data(variants=None)
    await state.update_data(correct=None)
    await state.update_data(type=None)
    await state.set_state(Current.event)


#-------------------------------------------------------------------------------

@router.callback_query(Current.setting_code, F.data == "ikb_back_actions_event")
async def add_test2(query: types.CallbackQuery, state: FSMContext):
    data_state = await state.get_data()
    name = data_state.get("event")
    await state.set_state(Current.event)
    ev = await event.get_event(data_state.get("event_id"))

    await query.message.answer(f"""‚ö°–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {name}
    
‚ö°–¢–µ–∫—É—â–∏–π –∫–æ–¥ –¥–æ—É—Å—Ç—É–ø–∞ <code>{ev.password if ev.password else "‚õî–ü–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"}</code>""", reply_markup=ikb_current_test(), parse_mode=ParseMode.HTML)


@router.callback_query(F.data == "ikb_back_actions", Current.event)
async def second(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    name = data.get("event")
    ev = await event.get_event(data.get("event_id"))

    await callback.message.answer(f"""‚ö°–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {name}
    
‚ö°–¢–µ–∫—É—â–∏–π –∫–æ–¥ –¥–æ—É—Å—Ç—É–ø–∞ <code>{ev.password if ev.password else "‚õî–ü–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"}</code>""", reply_markup=ikb_current_test(), parse_mode=ParseMode.HTML)


@router.callback_query(F.data == "ikb_back_to_notifications", Current.event)
async def second(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    name = data.get("event_name")
    ev = await event.get_event(data.get("event_id"))
    await callback.message.answer(f"""‚ö° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è <b>{name}</b>
‚ö°–¢–µ–∫—É—â–∏–π –∫–æ–¥ –¥–æ—É—Å—Ç—É–ø–∞ <code>{ev.password if ev.password else "‚õî–ü–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"}</code>""", reply_markup=ikb_current_test(), parse_mode=ParseMode.HTML)


@router.callback_query(F.data == "ikb_back_tochoose_opros", Current.event)
async def second(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    name = data.get("event")
    ev = await event.get_event(data.get("event_id"))
    await callback.message.answer(f"""‚ö°–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è <b>{name}</b>
    
‚ö°–¢–µ–∫—É—â–∏–π –∫–æ–¥ –¥–æ—É—Å—Ç—É–ø–∞ <code>{ev.password if ev.password else "‚õî–ü–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"}</code>""", reply_markup=ikb_current_test(), parse_mode=ParseMode.HTML)


#-------------------------------------------------------------------------------
@router.callback_query(F.data == "ikb_back_choose_questionnn", Current.event)
async def second(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Current.current_test)
    data = await state.get_data()
    id = data.get("current_test")
    kb = await ikb_all_questions(id)
    await callback.message.answer("‚ö°–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ‚ö°", reply_markup=kb)


@router.callback_query(F.data == "ikb_back_choose_type", Current.rebuild_quest)
async def second(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Current.current_test)
    data = await state.get_data()
    id = data.get("current_test")
    kb = await ikb_all_questions(id)
    await callback.message.answer("‚ö°–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ‚ö°", reply_markup=kb)
    await state.update_data(text=None)
    await state.update_data(variants=None)
    await state.update_data(correct=None)
    await state.update_data(type=None)


@router.callback_query(F.data == "ikb_back", Current2.correct)
async def second(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text = data.get("question")
    variants = data.get("variants")
    correct = data.get("correct")
    await callback.message.answer(f"""üõ†Ô∏è–í—ã –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç—É–æ—Ä–µ –≤–æ–ø—Ä–æ—Å–∞ —Å <b>–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞</b>

–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–∞ - 
<b>–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:</b>
{text if text else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:</b>
{variants if variants else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:</b>
{correct if correct else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}""", reply_markup=ikb_actions_qustion(), parse_mode=ParseMode.HTML)
    await state.set_state(Current2.event)


@router.callback_query(F.data == "ikb_back", Current2.question)
async def second(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text = data.get("question")
    variants = data.get("variants")
    correct = data.get("correct")
    await callback.message.answer(f"""üõ†Ô∏è–í—ã –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç—É–æ—Ä–µ –≤–æ–ø—Ä–æ—Å–∞ —Å <b>–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞</b>

–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–∞ - 
<b>–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:</b>
{text if text else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:</b>
{variants if variants else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:</b>
{correct if correct else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}""", reply_markup=ikb_actions_qustion(), parse_mode=ParseMode.HTML)
    await state.set_state(Current2.event)


@router.callback_query(F.data == "ikb_back", Current2.variants)
async def second(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text = data.get("question")
    variants = data.get("variants")
    correct = data.get("correct")
    await callback.message.answer(f"""üõ†Ô∏è–í—ã –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç—É–æ—Ä–µ –≤–æ–ø—Ä–æ—Å–∞ —Å <b>–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞</b>

–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–∞ - 
<b>–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:</b>
{text if text else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:</b>
{variants if variants else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:</b>
{correct if correct else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}""", reply_markup=ikb_actions_qustion(), parse_mode=ParseMode.HTML)
    await state.set_state(Current2.event)


@router.callback_query(F.data == "ikb_back", Current.correct)
async def second(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text = data.get("question")
    variants = data.get("variants")
    correct = data.get("correct")
    await callback.message.answer(f"""üõ†Ô∏è–í—ã –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç—É–æ—Ä–µ –≤–æ–ø—Ä–æ—Å–∞ —Å <b>–≤—ã–±–æ—Ä–æ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞</b>

–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–∞ - 
<b>–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:</b>
{text if text else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:</b>
{variants if variants else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:</b>
{correct if correct else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}""", reply_markup=ikb_actions_qustion(), parse_mode=ParseMode.HTML)
    await state.set_state(Current.event)


@router.callback_query(F.data == "ikb_back", Current.question)
async def second(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text = data.get("question")
    variants = data.get("variants")
    correct = data.get("correct")
    await callback.message.answer(f"""üõ†Ô∏è–í—ã –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç—É–æ—Ä–µ –≤–æ–ø—Ä–æ—Å–∞ —Å <b>–≤—ã–±–æ—Ä–æ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞</b>

–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–∞ - 
<b>–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:</b>
{text if text else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:</b>
{variants if variants else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:</b>
{correct if correct else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}""", reply_markup=ikb_actions_qustion(),parse_mode=ParseMode.HTML)
    await state.set_state(Current.event)


@router.callback_query(F.data == "ikb_back", Current.variants)
async def second(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text = data.get("question")
    variants = data.get("variants")
    correct = data.get("correct")
    await callback.message.answer(f"""üõ†Ô∏è–í—ã –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç—É–æ—Ä–µ –≤–æ–ø—Ä–æ—Å–∞ —Å <b>–≤—ã–±–æ—Ä–æ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞</b>

–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–∞ - 
<b>–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:</b>
{text if text else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:</b>
{variants if variants else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:</b>
{correct if correct else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}""", reply_markup=ikb_actions_qustion(), parse_mode=ParseMode.HTML)
    await state.set_state(Current.event)


#-----------------------------------------------------


@router.callback_query(F.data == "ikb_back", Current.setting_time2)
async def second(callback: types.CallbackQuery, state: FSMContext):
    data_state = await state.get_data()
    num = data_state.get("setting_name")
    name = data_state.get("event")
    await callback.message.answer(f"‚ö°–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞ <b>{num}</b> –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ <b>{name}</b>", reply_markup=ikb_rebuild(), parse_mode=ParseMode.HTML)
    await state.set_state(Current.current_test)


@router.callback_query(F.data == "ikb_back", Current.setting_passing2)
async def second(callback: types.CallbackQuery, state: FSMContext):
    data_state = await state.get_data()
    num = data_state.get("setting_name")
    name = data_state.get("event")
    await callback.message.answer(f"‚ö°–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞ <b>{num}</b> –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ <b>{name}</b>", reply_markup=ikb_rebuild(), parse_mode=ParseMode.HTML)
    await state.set_state(Current.current_test)


@router.callback_query(F.data == "ikb_back", Current.setting_code2)
async def second(callback: types.CallbackQuery, state: FSMContext):
    data_state = await state.get_data()
    num = data_state.get("setting_name")
    name = data_state.get("event")
    await callback.message.answer(f"‚ö°–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞ <b>{num}</b> –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ <b>{name}</b>", reply_markup=ikb_rebuild(), parse_mode=ParseMode.HTML)
    await state.set_state(Current.current_test)


@router.callback_query(F.data == "back_to_rebuild_test", Current.event)
async def second(callback: types.CallbackQuery, state: FSMContext):
    data_state = await state.get_data()
    num = data_state.get("setting_name")
    name = data_state.get("event")
    await callback.message.answer(f"‚ö°–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞ <b>{num}</b> –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ <b>{name}</b>", reply_markup=ikb_rebuild(), parse_mode=ParseMode.HTML)
    await state.set_state(Current.current_test)

#-----------------------------------------------------------------


@router.callback_query(F.data == "ikb_back", Current.setting_time)
async def second(callback: types.CallbackQuery, state: FSMContext):
    data_state = await state.get_data()
    num = data_state.get("current_test")
    name = data_state.get("event")
    await callback.message.answer("""‚öôÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ä–æ—Å–∞:
üìù–ò–º—è —Ç–µ—Å—Ç–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∞–∑–∏—Ç—å —Ç–µ–º—É —Ç–µ—Å—Ç–∞ 
üïí–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
üïí–í—Ä–µ–º—è —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ —Ç–µ—Å—Ç –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç –±—ã—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º""", reply_markup=ikb_settings_test())
    await state.set_state(Current.event)


@router.callback_query(F.data == "ikb_back", Current.setting_passing)
async def second(callback: types.CallbackQuery, state: FSMContext):
    data_state = await state.get_data()
    num = data_state.get("current_test")
    name = data_state.get("event")
    await callback.message.answer("""‚öôÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ä–æ—Å–∞:
üìù–ò–º—è —Ç–µ—Å—Ç–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∞–∑–∏—Ç—å —Ç–µ–º—É —Ç–µ—Å—Ç–∞ 
üïí–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
üïí–í—Ä–µ–º—è —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ —Ç–µ—Å—Ç –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç –±—ã—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º""", reply_markup=ikb_settings_test())
    await state.set_state(Current.event)


@router.callback_query(F.data == "ikb_back", Current.setting_code)
async def second(callback: types.CallbackQuery, state: FSMContext):
    data_state = await state.get_data()
    num = data_state.get("current_test")
    name = data_state.get("event")
    await callback.message.answer("""‚öôÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ä–æ—Å–∞:
üìù–ò–º—è —Ç–µ—Å—Ç–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∞–∑–∏—Ç—å —Ç–µ–º—É —Ç–µ—Å—Ç–∞ 
üïí–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
üïí–í—Ä–µ–º—è —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ —Ç–µ—Å—Ç –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç –±—ã—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º""", reply_markup=ikb_settings_test())
    await state.set_state(Current.event)

#------------------------------------------------------


@router.callback_query(F.data == "ikb_back_actions", Current.current_test)
async def second(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Current.event)
    data = await state.get_data()
    id = data.get("event_id")
    print("id ", id)
    kb = await ikb_all_tests(id)
    await callback.message.answer("üìã–°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤", reply_markup=kb)



@router.callback_query(Current.current_test, F.data == "ikb_back_all_questions")
async def add_test2(query: types.CallbackQuery, state: FSMContext):
    data_state = await state.get_data()
    name = data_state.get("event")
    num = data_state.get("current_test")
    await state.update_data(current_test=num)
    await query.message.answer(f"‚ö°–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞ –Ω–æ–º–µ—Ä <b>{num}</b> –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ <b>{name}</b>", reply_markup=ikb_rebuild(), parse_mode=ParseMode.HTML)


@router.callback_query(Current.event, F.data == "ikb_back_all_questions")
async def add_test2(query: types.CallbackQuery, state: FSMContext):
    data_state = await state.get_data()
    name = data_state.get("event")
    num = data_state.get("current_test")
    await state.update_data(current_test=num)
    await query.message.answer(f"‚ö°–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞ –Ω–æ–º–µ—Ä <b>{num}</b> –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ <b>{name}</b>", reply_markup=ikb_rebuild(), parse_mode=ParseMode.HTML)


@router.callback_query(F.data == "ikb_back")
async def second(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –¥–æ—Ä–æ–≥–æ–π –∞–¥–º–∏–Ω, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=ikb_main_menu())