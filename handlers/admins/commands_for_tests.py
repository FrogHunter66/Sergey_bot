from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Router, F
from aiogram.enums.dice_emoji import DiceEmoji
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery
from aiogram import types
from aiogram.filters import Command

from keyboard.ikb_actions_question import ikb_actions_qustion, ikb_actions_rebuild_qustion
from keyboard.inline_main_menu import ikb_main_menu
from keyboard.ikb_back import ikb_back
from keyboard.save_event import ikb_save
from keyboard.ikb_all_events import ikb_all_events
from filters.is_admin import Admin
from utils.db_api.quck_commands import event
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from states.fsm import Creation, Current, Current2
from keyboard.list_tests import ikb_all_tests, Choose_test
from keyboard.ikb_current_test import ikb_current_test
from keyboard.ikb_settings_test import ikb_settings_test
from keyboard.ikb_timer import ikb_timer, Choose_timeer
from keyboard.ikb_adding_questions import ikb_adding_questions
from keyboard.ikb_types_questions import ikb_types_of_questions
from keyboard.list_tests import ikb_all_tests
from keyboard.ikb_rebuilding_test import ikb_rebuild
from keyboard.list_questions import ikb_all_questions, Choose_quest
from utils.db_api.quck_commands import tests, questions
from aiogram.enums import ParseMode
router = Router()


@router.callback_query(Choose_test.filter(F.cb == "ikb_tests"), Current.event)
async def second(query: CallbackQuery, callback_data: Choose_test, state: FSMContext):
    data_state = await state.get_data()
    id = data_state.get("event_id")
    data = await tests.get_current(id_event=id, id_test=callback_data.id)
    num = data.id_test
    name = data_state.get("event")
    await state.update_data(current_test=num)
    await state.update_data(setting_name=data.name)
    await query.message.answer(f"""<b>–í—ã –≤ –ø–∞–Ω–µ–ª–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Ç–µ—Å—Ç–∞</b> {data.name} 

<b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b> {name}

‚ö°<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>‚ö°""", reply_markup=ikb_rebuild(), parse_mode=ParseMode.HTML)
    await state.set_state(Current.current_test)
    await state.update_data(event=name)


@router.callback_query(F.data == "ikb_qustions_rebuild", Current.current_test)
async def second(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    id = data.get("current_test")
    kb = await ikb_all_questions(id)
    await query.message.answer("‚ö°–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ‚ö°", reply_markup=kb)



@router.callback_query(Current.current_test, F.data == "ikb_name_for_test")
async def add_test2(query: CallbackQuery, state: FSMContext):
    await state.set_state(Current.setting_name2)
    data = await state.get_data()
    id_ev = data.get("event_id")
    id_test = data.get("current_test")
    test = await tests.get_current(id_test=id_test, id_event=id_ev)
    current_name = test.name
    await query.message.answer(f"""üìù–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è —Ç–µ—Å—Ç–∞
<b>–¢–µ–∫—É—â–µ–µ –∏–º—è</b> {current_name}""", reply_markup=ikb_back(), parse_mode=ParseMode.HTML)


@router.callback_query(Current.current_test, F.data == "access_code")
async def add_test2(query: CallbackQuery, state: FSMContext):
    await state.set_state(Current.setting_code2)
    data = await state.get_data()
    id_ev = data.get("event_id")
    id_test = data.get("current_test")
    test = await tests.get_current(id_test=id_test, id_event=id_ev)
    current_code = test.token
    await query.message.answer(f"""üîì–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç—É
<b>–¢–µ–∫—É—â–∏–π –∫–æ–¥</b> {current_code}""", reply_markup=ikb_back(), parse_mode=ParseMode.HTML)


@router.callback_query(Current.current_test, F.data == "time_to_answer")
async def add_test2(query: CallbackQuery, state: FSMContext):
    await state.set_state(Current.setting_passing2)
    data = await state.get_data()
    id_ev = data.get("event_id")
    id_test = data.get("current_test")
    test = await tests.get_current(id_test=id_test, id_event=id_ev)
    time = test.bound_time
    await query.message.answer(f"""üïí–í—ã–±–µ—Ä–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞, –≤—ã—Ä–∞–∑–∏—Ç–µ –≤ –º–∏–Ω—É—Ç–∞—Ö
*–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö {time}*""", parse_mode=ParseMode.MARKDOWN_V2)


@router.callback_query(Current.current_test, F.data == "time_of_test")
async def add_test2(query: CallbackQuery, state: FSMContext):
    await state.set_state(Current.setting_time2)
    data = await state.get_data()
    id_ev = data.get("event_id")
    id_test = data.get("current_test")
    test = await tests.get_current(id_test=id_test, id_event=id_ev)
    time = test.lifetime
    await query.message.answer(f"""üïí–í—ã–±–µ—Ä–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞, –≤—ã—Ä–∞–∑–∏—Ç–µ –≤ –º–∏–Ω—É—Ç–∞—Ö 
*–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ {time}*""", reply_markup=ikb_timer(), parse_mode=ParseMode.MARKDOWN_V2)


@router.message(Current.setting_passing2, Admin())
async def add_test3(message: Message, state: FSMContext):
    code = message.text
    try:
        code = int(code)
        data = await state.get_data()
        id_ev = data.get("event_id")
        test_id = data.get("current_test")
        await tests.update_bound_time(id_event=id_ev, id_test=test_id, new_time=code)
        await state.set_state(Current.current_test)
        await message.answer(f"‚úÖ–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ *{code}*", parse_mode=ParseMode.MARKDOWN_V2)
        await message.answer("""üìù*–ò–º—è —Ç–µ—Å—Ç–∞* –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∞–∑–∏—Ç—å —Ç–µ–º—É —Ç–µ—Å—Ç–∞ 
üîì*–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞* –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç—É
üïí*–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ* —Ç–µ—Å—Ç–∞
üïí*–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è* —Ç–µ—Å—Ç–∞""", reply_markup=ikb_rebuild(), parse_mode=ParseMode.MARKDOWN_V2)
    except:
        await state.set_state(Current.current_test)
        await message.answer("‚ùå–í—Ä–µ–º—è –º–æ–∂–µ—Ç –±—ã—Ç—å *—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–µ–Ω–Ω–Ω–æ–≥–æ* —Ñ–æ—Ä–º–∞—Ç–∞", parse_mode=ParseMode.MARKDOWN_V2)
        await message.answer("""üìù*–ò–º—è —Ç–µ—Å—Ç–∞* –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∞–∑–∏—Ç—å —Ç–µ–º—É —Ç–µ—Å—Ç–∞ 
üîì*–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞* –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç—É
üïí*–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ* —Ç–µ—Å—Ç–∞
üïí*–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è* —Ç–µ—Å—Ç–∞""", reply_markup=ikb_rebuild(), parse_mode=ParseMode.MARKDOWN_V2)


@router.message(Current.setting_name2, Admin())
async def add_test3(message: Message, state: FSMContext):
    data = await state.get_data()
    id_test = data.get("current_test")
    code = message.text
    await tests.update_name(id_test=id_test, id_event=1, new_name=code)
    await message.answer(f"‚úÖ–ò–º—è —Ç–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ <b>{code}</b>", parse_mode=ParseMode.HTML)
    await message.answer("""üìù*–ò–º—è —Ç–µ—Å—Ç–∞* –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∞–∑–∏—Ç—å —Ç–µ–º—É —Ç–µ—Å—Ç–∞ 
üîì*–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞* –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç—É
üïí*–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ* —Ç–µ—Å—Ç–∞
üïí*–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è* —Ç–µ—Å—Ç–∞""", reply_markup=ikb_rebuild(), parse_mode=ParseMode.MARKDOWN_V2)
    await state.set_state(Current.event)


@router.message(Current.setting_code2, Admin())
async def add_test3(message: Message, state: FSMContext):
    code = message.text
    data = await state.get_data()
    id_ev = data.get("event_id")
    test_id = data.get("current_test")
    try:
        code = int(code)
        if code > 0:
            is_unique = True
            data_tests = await tests.get_all_tests()
            for test in data_tests:
                print(test.token)
                if test.token == code:
                    is_unique = False
                    break
            if is_unique:
                code = int(code)
                print(test_id)
                await tests.update_code(id_event=id_ev, id_test=test_id, new_code=code)
                await message.answer(f"‚úÖ–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç—É —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {code}", parse_mode=ParseMode.MARKDOWN_V2)
                await message.answer("""üìù*–ò–º—è —Ç–µ—Å—Ç–∞* –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∞–∑–∏—Ç—å —Ç–µ–º—É —Ç–µ—Å—Ç–∞ 
üîì*–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞* –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç—É
üïí*–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ* —Ç–µ—Å—Ç–∞
üïí*–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è* —Ç–µ—Å—Ç–∞""", reply_markup=ikb_rebuild(), parse_mode=ParseMode.MARKDOWN_V2)
            else:
                await message.answer("‚ùå–î–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ *—É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º —Ç–µ—Å—Ç–µ*, –Ω–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥", parse_mode=ParseMode.MARKDOWN_V2)
                await message.answer("""üìù*–ò–º—è —Ç–µ—Å—Ç–∞* –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∞–∑–∏—Ç—å —Ç–µ–º—É —Ç–µ—Å—Ç–∞ 
üîì*–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞* –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç—É
üïí*–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ* —Ç–µ—Å—Ç–∞
üïí*–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è* —Ç–µ—Å—Ç–∞""", reply_markup=ikb_rebuild(), parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await message.answer("üîì–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å *–Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º*", parse_mode=ParseMode.MARKDOWN_V2)
            await message.answer("""üìù*–ò–º—è —Ç–µ—Å—Ç–∞* –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∞–∑–∏—Ç—å —Ç–µ–º—É —Ç–µ—Å—Ç–∞ 
üîì*–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞* –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç—É
üïí*–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ* —Ç–µ—Å—Ç–∞
üïí*–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è* —Ç–µ—Å—Ç–∞""", reply_markup=ikb_rebuild(), parse_mode=ParseMode.MARKDOWN_V2)
        await state.set_state(Current.current_test)
    except:
        await state.set_state(Current.current_test)
        await message.answer("üîì–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å *—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–µ–Ω–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞*", parse_mode=ParseMode.MARKDOWN_V2)
        await message.answer("""üìù*–ò–º—è —Ç–µ—Å—Ç–∞* –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∞–∑–∏—Ç—å —Ç–µ–º—É —Ç–µ—Å—Ç–∞ 
üîì*–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞* –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç—É
üïí*–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ* —Ç–µ—Å—Ç–∞
üïí*–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è* —Ç–µ—Å—Ç–∞""", reply_markup=ikb_rebuild(), parse_mode=ParseMode.MARKDOWN_V2)


@router.callback_query(Current.setting_time2, Choose_timeer.filter(F.cb=="ikb_time"))
async def add_test2(query: CallbackQuery, state: FSMContext, callback_data: Choose_timeer):
    await state.update_data(setting_time=callback_data.id)
    data = await state.get_data()
    id_ev = data.get("event_id")
    test_id = data.get("current_test")
    await tests.update_lifetime(id_event=id_ev, id_test=test_id, new_time=callback_data.id)
    await query.message.answer(f"‚úÖ–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ {callback_data.id}", parse_mode=ParseMode.MARKDOWN_V2)
    await query.message.answer("""üìù*–ò–º—è —Ç–µ—Å—Ç–∞* –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∞–∑–∏—Ç—å —Ç–µ–º—É —Ç–µ—Å—Ç–∞ 
üîì*–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞* –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç—É
üïí*–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ* —Ç–µ—Å—Ç–∞
üïí*–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è* —Ç–µ—Å—Ç–∞""", reply_markup=ikb_rebuild(), parse_mode=ParseMode.MARKDOWN_V2)
    await state.set_state(Current.current_test)




@router.callback_query(F.data == "ikb_add_to_current", Current.current_test)
async def second(query: CallbackQuery, state: FSMContext):
    await state.set_state(Current.event)
    await query.message.answer("""‚úèÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞:
1Ô∏è‚É£1 —Ç–∏–ø \- –≤–æ–ø—Ä–æ—Å —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
üî¢2 —Ç–∏–ø \- –≤–æ–ø—Ä–æ—Å —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º""", reply_markup=ikb_types_of_questions(), parse_mode=ParseMode.MARKDOWN_V2)


@router.callback_query(Choose_quest.filter(F.cb=="ikb_pickquestion"), Current.current_test)
async def rebuild_current_quest(querry: CallbackQuery, state: FSMContext, callback_data: Choose_quest):
    id_quest = callback_data.id
    curr_quest = await questions.get_current(id_quest)
    await state.update_data(current_quest=id_quest)
    if curr_quest:
        await state.set_state(Current.rebuild_quest) #todo –ù—É–∂–Ω–∞ –Ω–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª–∏—Ç —É–¥–∞–ª—è—Ç—å –≤–æ–ø—Ä–æ—Å, –æ—á–∏—â–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏, –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é –≤ –±–¥ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        varss = curr_quest.variants
        vars = list(map(str, varss.split(".*.")))
        vars = "\n".join(f"{index}) {element}" for index, element in enumerate(vars, start=1))
        if curr_quest.type == 2:
            correct = list(map(str, curr_quest.correct_answer.split(".*.")))
            correct = "\n".join(f"{index}) {element}" for index, element in enumerate(correct, start=1))
            await querry.message.answer(
                f"""üõ†Ô∏è–í—ã –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ –≤–æ–ø—Ä–æ—Å–∞ {curr_quest.id_quest} —Å –≤—ã–±–æ—Ä–æ–º <b>{"–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∞" if curr_quest.type == 1 else " –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ "}</b> 
–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å:

<b>–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞</b>
{curr_quest.text if curr_quest.text else "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞</b>
{vars if vars else "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç</b>
{correct if correct else "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}""", reply_markup=ikb_actions_rebuild_qustion(), parse_mode=ParseMode.HTML)#parse_mode_–±—ã–ª
            await state.update_data(question=curr_quest.text)
            await state.update_data(type=2)
            await state.update_data(variants=vars)
            await state.update_data(correct=correct)
        elif curr_quest.type == 1:
            correct = curr_quest.correct_answer
            await querry.message.answer(f"""üõ†Ô∏è–í—ã –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ –≤–æ–ø—Ä–æ—Å–∞ {curr_quest.id_quest} —Å –≤—ã–±–æ—Ä–æ–º <b>{" –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∞" if curr_quest.type == 1 else " –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ "}</b>
–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å:

<b>–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞</b>
{curr_quest.text if curr_quest.text else "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞</b>
{vars if vars else "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç</b>
{correct if correct else "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}""", reply_markup=ikb_actions_rebuild_qustion(), parse_mode=ParseMode.HTML)#parse_mode_–±—ã–ª
            await state.update_data(question=curr_quest.text)
            await state.update_data(type=1)
            await state.update_data(variants=vars)
            await state.update_data(correct=correct)
    else:
        await querry.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")



@router.callback_query(F.data == "ikb_save_quest_changes", Current.rebuild_quest)
async def second(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text = data.get("question")
    variants = data.get("variants")
    correct = data.get("correct")
    id_quest = data.get("current_quest")
    id_test = data.get("current_test")
    typee = data.get("type")
    try:
        await query.message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        kb = await ikb_all_questions(id_test)
        await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=kb)
        await state.set_state(Current.current_test)
        await state.update_data(text=None)
        await state.update_data(variants=None)
        await state.update_data(correct=None)
        await state.update_data(type=None)
    except Exception as err:
        await state.set_state(Current.current_test)
        print("err in 251 line commands for test", err)
        await query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        await query.message.answer(
f"""üõ†Ô∏è–í—ã –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ –≤–æ–ø—Ä–æ—Å–∞ {id_quest} —Å –≤—ã–±–æ—Ä–æ–º <b>{" –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∞" if typee == 1 else " –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ "}</b>
–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å:

<b>–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞</b>
{text if text else "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞</b>
{variants if variants else "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç</b>
{correct if correct else "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}""", reply_markup=ikb_actions_rebuild_qustion(), parse_mode=ParseMode.HTML)#parse_mode_–±—ã–ª
