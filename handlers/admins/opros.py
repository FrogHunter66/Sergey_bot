from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Router, F
from aiogram.enums.dice_emoji import DiceEmoji
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery
from aiogram import types
from aiogram.filters import Command
from filters.is_admin import Admin
from keyboard.list_questions import ikb_all_questions
from keyboard.list_tests import ikb_all_tests
from set_logs1.logger_all1 import log_exceptions1
from utils.db_api.quck_commands import event, tests, questions, users
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from states.fsm import Creation, Current

from keyboard.inline_main_menu import ikb_main_menu
from keyboard.ikb_back import ikb_back
from keyboard.ikb_timer import ikb_timer, Choose_timeer
from keyboard.save_event import ikb_save
from keyboard.ikb_all_events import ikb_all_events
from keyboard.ikb_all_events import ikb_all_events, Choose_event
from keyboard.ikb_current_test import ikb_current_test
from keyboard.ikb_settings_test import ikb_settings_test, ikb_settings_quiz
from keyboard.ikb_adding_questions import ikb_adding_questions, ikb_adding_quiz_quest
from keyboard.ikb_types_questions import ikb_types_of_questions
from keyboard.ikb_actions_question import ikb_actions_qustion
from keyboard.ikb_change_variants_question import ikb_change_variants_question
router = Router()


def decode_lifetime(lifetime):
    try:
        if lifetime[-1] == "m":
            return lifetime[:-1] + " –º–∏–Ω"
        elif lifetime[-1] == "h":
            return lifetime[:-1] + " —á–∞—Å"
        elif lifetime[-1] == "d":
            return lifetime[:-1] + " –¥–Ω"
        elif lifetime == "without":
            return "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ"
    except: return "‚õî–ü–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"




@router.callback_query(Current.event, F.data =="create_quiz")
async def second(query: CallbackQuery, state: FSMContext):
    user = await users.get_current_user(query.from_user.id)
    data = await state.get_data()
    await query.message.answer(f"""–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ–ø—Ä–æ—Å–æ–≤: *{user.c_tests}*

    üõ†Ô∏è–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ä–æ—Å–∞:""", reply_markup=ikb_settings_quiz(), parse_mode=ParseMode.MARKDOWN_V2)



@router.callback_query(Current.event, F.data == "ikb_name_for_quizz")
async def add_test2(query: CallbackQuery, state: FSMContext):
    await state.set_state(Current.setting_name)
    await query.message.answer("üìù–£–∫–∞–∂–∏—Ç–µ –∏–º—è –æ–ø—Ä–æ—Å–∞, *–∏–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª—é–±—ã–µ —Å–∏–º–≤–æ–ª—ã*", reply_markup=ikb_back(), parse_mode=ParseMode.MARKDOWN_V2)


@router.callback_query(Current.event, F.data == "time_to_answer_quizz")
async def add_test2(query: CallbackQuery, state: FSMContext):
    await state.set_state(Current.setting_passing_quizz)
    await query.message.answer("üïí–í—ã–±–µ—Ä–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø—Ä–æ—Å, *–≤—ã—Ä–∞–∑–∏—Ç–µ –≤ –º–∏–Ω—É—Ç–∞—Ö*", reply_markup=ikb_back(),  parse_mode=ParseMode.MARKDOWN_V2)


@router.callback_query(Current.event, F.data == "time_of_quizz")
async def add_test2(query: CallbackQuery, state: FSMContext):
    await state.set_state(Current.setting_time_quizz)
    await query.message.answer("üïí–í—ã–±–µ—Ä–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å", reply_markup=ikb_timer(), parse_mode=ParseMode.MARKDOWN_V2)


@router.message(Current.setting_name_quizz, Admin())
async def add_test3(message: Message, state: FSMContext):
    code = message.text
    await state.update_data(setting_name_quizz=code)
    data = await state.get_data()
    setting_passing = data.get("setting_passing_quizz")
    setting_time = data.get("setting_time_quizz")
    await message.answer(f"‚úÖ–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ <b>{code}</b>", parse_mode=ParseMode.HTML)
    await message.answer(f"""üìù–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ <b>{code}</b>
üïí–í—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞: <b>{str(setting_passing) + " –º–∏–Ω—É—Ç" if setting_passing else "‚õî–ü–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"}</b>
üïí–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞: <b>{decode_lifetime(setting_time)}</b>""", reply_markup=ikb_settings_quiz(), parse_mode=ParseMode.HTML)
    await state.set_state(Current.event)



@router.message(Current.setting_passing_quizz, Admin())
async def add_test3(message: Message, state: FSMContext):
    code = message.text
    data = await state.get_data()
    setting_name = data.get('setting_name_quizz')
    setting_time = data.get("setting_time_quizz")
    setting_passing = data.get("setting_passing_quizz")
    try:
        code = int(code)
        if code > 0:
            code = int(code)
            await state.update_data(setting_passing_quizz=code)
            await message.answer(f"‚úÖ–í—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ *—É—Å–ø–µ—à–Ω–æ* —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ *{code}*", parse_mode=ParseMode.MARKDOWN_V2)
            await message.answer(f"""üìù–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ <b>{setting_name if setting_name else "‚õî–ü–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"}</b>
üïí–í—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ <b>{code} –º–∏–Ω—É—Ç</b>
üïí–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ <b>{decode_lifetime(setting_time)}</b>""", reply_markup=ikb_settings_quiz(), parse_mode=ParseMode.HTML)
        else:
            await message.answer("‚ùå–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å *–Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º*", parse_mode=ParseMode.MARKDOWN_V2)
            await message.answer(f"""üìù–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ <b>{setting_name if setting_name else "‚õî–ü–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"}</b>
üïí–í—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ <b>{str(setting_passing) + " –º–∏–Ω—É—Ç" if setting_passing else "‚õî–ü–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"}</b>
üïí–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ <b>{decode_lifetime(setting_time)}</b>""", reply_markup=ikb_settings_quiz(), parse_mode=ParseMode.HTML)
        await state.set_state(Current.event)
    except:
        await state.set_state(Current.event)
        await message.answer("‚ùå–í—Ä–µ–º—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ *—á–∏—Å–ª–µ–Ω–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞*", parse_mode=ParseMode.MARKDOWN_V2)
        await message.answer(f"""üìù–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ <b>{setting_name if setting_name else "‚õî–ü–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"}</b>
üïí–í—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ <b>{str(setting_passing) + " –º–∏–Ω—É—Ç" if setting_passing else "‚õî–ü–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"}</b>
üïí–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ <b>{decode_lifetime(setting_time)}</b>""", reply_markup=ikb_settings_quiz(), parse_mode=ParseMode.HTML)


@router.callback_query(Current.setting_time_quizz, Choose_timeer.filter(F.cb=="ikb_time"))
async def add_test2(query: CallbackQuery, state: FSMContext, callback_data: Choose_timeer):
    await state.update_data(setting_time_quizz=callback_data.id)
    data = await state.get_data()
    setting_name = data.get('setting_name_quizz')
    setting_passing = data.get("setting_passing_quizz")
    await query.message.answer(f"‚úÖ–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ *{decode_lifetime(callback_data.id)}*", parse_mode=ParseMode.MARKDOWN_V2)
    await query.message.answer(f"""üìù–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ <b>{setting_name if setting_name else "‚õî–ü–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"}</b>
üïí–í—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ <b>{str(setting_passing) + " –º–∏–Ω—É—Ç" if setting_passing else "‚õî–ü–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"}</b>
üïí–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ <b>{decode_lifetime(callback_data.id)}</b>""", reply_markup=ikb_settings_quiz(), parse_mode=ParseMode.HTML)
    await state.set_state(Current.event)

#---------------------------------- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–¥ --------------------------------------
async def get_unique_key(keys):
    for i in range(1000):
        if i not in keys:
            return i
    else: return None


@router.callback_query(Current.event, F.data == "ikb_create_quizz_1")
async def add_test2(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    id = data.get("event_id")
    passing = data.get("setting_passing_quizz")
    time = data.get("setting_time_quizz")
    test_name = data.get("setting_name_quizz")

    if passing and time and test_name:
        try:
            all_test = await tests.get_all_tests()
            values = list()
            for t in all_test:
                values.append(int(t.id_test))
            id_test = await get_unique_key(values)
            await state.update_data(current_test=id_test)
            await tests.add_test(id_event=id, setting_time=time, setting_passing=passing, id_test=id_test, name=test_name)

            await tests.decrement_tests(query.from_user.id)

            user = await users.get_current_user(query.from_user.id)
            await query.message.answer(f"‚úî–û–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ç–µ—Å—Ç–æ–≤: <b>{user.c_tests}</b>", parse_mode=ParseMode.HTML)
            await query.message.answer("‚ùî–ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –≤–æ–ø—Ä–æ—Å–∞–º–∏", reply_markup=ikb_adding_quiz_quest())
            await state.update_data(setting_passing_quizz="")
            await state.update_data(setting_time_quizz="")
            await state.update_data(setting_name_quizz="")
        except Exception as err:
            await query.message.answer("‚ùå–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=ikb_back())
            await log_exceptions1("create_test_final", "ERROR", "create_test.py", 339, err, query.from_user.id)
    else:
        await query.message.answer(f"""üìù–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞: <b>{test_name if test_name else "‚õî–ü–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"}</b> 
üïò–í—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞: <b>{str(time) + " –º–∏–Ω—É—Ç" if time else "‚õî–ü–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"}</b>
üïò–í—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞: <b>{decode_lifetime(passing)}</b>

‚úçÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ä–æ—Å–∞""", reply_markup=ikb_settings_quiz(), parse_mode=ParseMode.HTML)



@router.callback_query(Current.event, F.data == "create_quizz_quest")
async def add_test2(query: CallbackQuery, state: FSMContext):
    await query.message.answer("""‚úèÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞:
1Ô∏è‚É£1 —Ç–∏–ø \- –≤–æ–ø—Ä–æ—Å —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º
üî¢2 —Ç–∏–ø \- –≤–æ–ø—Ä–æ—Å —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º""", reply_markup=ikb_types_of_questions(), parse_mode=ParseMode.MARKDOWN_V2)


@router.callback_query(Current.event, F.data == "C")
async def add_test2(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    id = data.get("event_id")
    kb = await ikb_all_tests(id)
    await query.message.answer("üìã–°–ø–∏—Å–æ–∫ –æ–ø—Ä–æ—Å–æ–≤", reply_markup=kb)















