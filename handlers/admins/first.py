from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Router, F
from aiogram.enums.dice_emoji import DiceEmoji
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery
from aiogram import types
from aiogram.filters import Command
from filters.is_admin import Admin
from keyboard.list_questions import ikb_all_questions
from set_logs1.logger_all1 import log_exceptions1
from utils.db_api.quck_commands import event, tests, questions
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from states.fsm import Creation, Current

from keyboard.inline_main_menu import ikb_main_menu
from keyboard.ikb_back import ikb_back
from keyboard.save_event import ikb_save
from keyboard.ikb_all_events import ikb_all_events
from keyboard.ikb_all_events import ikb_all_events, Choose_event
from keyboard.ikb_current_test import ikb_current_test
from keyboard.ikb_settings_test import ikb_settings_test
from keyboard.ikb_timer import ikb_timer
from keyboard.ikb_adding_questions import ikb_adding_questions
from keyboard.ikb_types_questions import ikb_types_of_questions
from keyboard.ikb_actions_question import ikb_actions_qustion
from keyboard.ikb_change_variants_question import ikb_change_variants_question
router = Router()


@router.callback_query(Current.event, F.data =="ikb_1st_type")
async def second(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await state.update_data(type=1)
    text = data.get("text")
    variants = data.get("variants")
    correct = data.get("correct")
    if variants:
        list_vars = list(map(str, variants.split(".*.")))
        variants = "\n".join(f"{index}. {element}" for index, element in enumerate(list_vars, start=1))
        await query.message.answer(f"""üõ†Ô∏è–í—ã –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –≤–æ–ø—Ä–æ—Å–∞ c <b>–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º</b>
–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–∞: 

<b>–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:</b>
{text if text else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:</b>
{variants if variants else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</b>
{correct if correct else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}""", reply_markup=ikb_actions_qustion(), parse_mode=ParseMode.HTML)  # p
    else:
        await query.message.answer(f"""üõ†Ô∏è–í—ã –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –≤–æ–ø—Ä–æ—Å–∞ c <b>–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º</b>
–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–∞: 
    
<b>–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:</b>
{text if text else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}
    
<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:</b>
{variants if variants else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}
    
<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</b>
{correct if correct else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}""", reply_markup=ikb_actions_qustion(), parse_mode=ParseMode.HTML)#parse_mode_–±—ã–ª



@router.callback_query(Current.event, F.data =="ikb_text_quest")
async def second(query: CallbackQuery, state: FSMContext):
    await query.message.answer("‚ùî–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞", reply_markup=ikb_back())
    await state.set_state(Current.question)

#------------------------------ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ -----------------------------------
@router.callback_query(Current.event, F.data =="ikb_change_quest_variant")
async def second(query: CallbackQuery, state: FSMContext):
    await query.message.answer("üî†–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞", reply_markup=ikb_change_variants_question())


@router.callback_query(Current.event, F.data == "ikb_add_new_variant")
async def second(query: CallbackQuery, state: FSMContext):
    await query.message.answer("üî†–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞") # todo –±—ç–∫
    await state.set_state(Current.variants_new)


@router.callback_query(Current.event, F.data == "ikb_clear_all_vars")
async def second(query: CallbackQuery, state: FSMContext):
    await state.update_data(variants=None)
    await state.update_data(correct=None)
    data = await state.get_data()
    text = data.get("question")
    correct = data.get("correct")
    await query.message.answer(f"""‚úîÔ∏è–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã""")
    await query.message.answer(f"""üõ†Ô∏è–í—ã –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –≤–æ–ø—Ä–æ—Å–∞ c <b>–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º</b>
–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–∞: 

<b>–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:</b>
{text if text else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:</b>
‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ

<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</b>
{correct if correct else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}""", reply_markup=ikb_actions_qustion(), parse_mode=ParseMode.HTML)


@router.callback_query(Current.event, F.data == "ikb_delete_one_var")
async def question(query: CallbackQuery, state:FSMContext):
    data = await state.get_data()
    variants = (data.get("variants"))
    if variants:
        list_variants = list(map(str, variants.split(".*.")))
        variants = "\n".join(f"{index}. {element}" for index, element in enumerate(list_variants, start=1))
        await query.message.answer(f"""üî†–¢–µ–∫—É—â–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:
{variants}
üéØ–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ç 1 –¥–æ {len(list_variants)}""") # todo –º–æ–∂–Ω–æ –±—ç–∫
        await state.set_state(Current.variants_del)
    else:
        text = data.get("question")
        correct = data.get("correct")
        await query.message.answer(f"""‚õî–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã""")
        await query.message.answer(f"""üõ†Ô∏è–í—ã –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –≤–æ–ø—Ä–æ—Å–∞ c <b>–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º</b>
–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–∞: 

<b>–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:</b>
{text if text else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:</b>
{variants if variants else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</b>
{correct if correct else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}""", reply_markup=ikb_actions_qustion(), parse_mode=ParseMode.HTML)
        await state.set_state(Current.event)


@router.message(Current.variants_del, Admin())
async def question(message: Message, state:FSMContext):
    data = await state.get_data()
    num = message.text
    try:
        num = int(num)
        variants = data.get("variants")
        list_vars = list(map(str, variants.split(".*.")))
        deleted_var = list_vars.pop(num-1)
        new_vars = ".*.".join(list_vars)
        text = data.get('question')
        correct = data.get("correct")

        variants_str = "\n".join(f"{index}. {element}" for index, element in enumerate(list_vars, start=1))
        await state.update_data(variants=new_vars)

        await message.answer(f"""‚úÖ–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. {deleted_var} –ë—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω
–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤:
{variants_str if len(list_vars) > 0 else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}""")
        await message.answer(f"""üõ†Ô∏è–í—ã –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –≤–æ–ø—Ä–æ—Å–∞ c <b>–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º</b>
–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–∞: 

<b>–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:</b>
{text if text else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:</b>
{variants_str if variants else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</b>
{correct if correct else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}""", reply_markup=ikb_actions_qustion(),
                             parse_mode=ParseMode.HTML)  # p
        await state.set_state(Current.event)

    except:
        await message.answer(f"""‚ùå–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, 
–í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥‚Ü©Ô∏è""", reply_markup=ikb_back()) #todo –ë–≠–ö


@router.message(Current.variants_new, Admin())
async def question(message: Message, state:FSMContext):
    data = await state.get_data()

    text = message.text
    var_old = (data.get("variants"))
    if var_old:
        vars = var_old + ".*." + text
        await state.update_data(variants=vars)
    else:
        await state.update_data(variants=text)
    data_new = await state.get_data()
    variants = data_new.get("variants")
    text = data_new.get("question")
    correct = data_new.get("correct")
    if variants:
        list_variants = list(map(str, variants.split(".*.")))
        variants = "\n".join(f"{index}. {element}" for index, element in enumerate(list_variants, start=1))

    await message.answer(f"""üõ†Ô∏è–í—ã –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –≤–æ–ø—Ä–æ—Å–∞ c <b>–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º</b>
–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–∞: 

<b>–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:</b>
{text if text else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:</b>
{variants if variants else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</b>
{correct if correct else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}""", reply_markup=ikb_actions_qustion(), parse_mode=ParseMode.HTML)  # p
    await state.set_state(Current.event)

#------------------------------------------------------------------------------------------------------------------


@router.callback_query(Current.event, F.data =="ikb_correct_one")
async def second(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    variants = data.get("variants")
    if variants:
        lst_vars = list(map(str, variants.split(".*.")))
        vars = "\n".join(f"{index}. {element}" for index, element in enumerate(lst_vars, start=1))
        response = f"üéØ–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞: {vars}"
        await query.message.answer(response)
    else:
        await query.message.answer("‚ùå–í—ã –ø–æ–∫–∞ –Ω–µ –≤–≤–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞")
    await query.message.answer("üéØ–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º", reply_markup=ikb_back())
    await state.set_state(Current.correct)


@router.message(Current.question, Admin())
async def question(message: Message, state:FSMContext):
    text = message.text
    await state.update_data(question=text)
    data = await state.get_data()
    text = data.get("question")
    variants = data.get("variants")
    correct = data.get("correct")
    if variants:
        list_vars = list(map(str, variants.split(".*.")))
        variants = "\n".join(f"{index}. {element}" for index, element in enumerate(list_vars, start=1))
        await message.answer(f"""üõ†Ô∏è–í—ã –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –≤–æ–ø—Ä–æ—Å–∞ c <b>–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º</b>
–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–∞: 

<b>–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:</b>
{text if text else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:</b>
{variants if variants else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</b>
{correct if correct else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}""", reply_markup=ikb_actions_qustion(), parse_mode=ParseMode.HTML)  # p
    else:
        await message.answer(f"""üõ†Ô∏è–í—ã –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –≤–æ–ø—Ä–æ—Å–∞ c <b>–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º</b>
–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–∞: 

<b>–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:</b>
    {text if text else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:</b>
{variants if variants else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</b>
{correct if correct else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}""", reply_markup=ikb_actions_qustion(), parse_mode=ParseMode.HTML)  # parse_mode_–±—ã–ª
    await state.set_state(Current.event)


@router.message(Current.correct, Admin())
async def question(message: Message, state:FSMContext):
    text = message.text
    data = await state.get_data()
    vars = data.get("variants")
    qest = data.get("question")
    try:
        text = int(text)
        if vars:
            vars = list(map(str, vars.split(".*.")))
            if text > 0 and text <= len(vars):
                await state.update_data(correct=vars[text-1])
                variants = "\n".join(f"{index}. {element}" for index, element in enumerate(vars, start=1))

                await message.answer(f"‚úÖ–£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ <b>{text}: {vars[text-1]}</b>", parse_mode=ParseMode.HTML)
                await message.answer(f"""Ô∏èüõ†Ô∏è–í—ã –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –≤–æ–ø—Ä–æ—Å–∞ c <b>–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º</b>
–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–∞: 

<b>–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:</b>
{qest if qest else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:</b>
{variants if variants else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}

<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</b>
{vars[text-1] if vars[text-1] else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}""", reply_markup=ikb_actions_qustion(), parse_mode=ParseMode.HTML)#parse_mode_–±—ã–ª
                await state.set_state(Current.event)
            else:
                await message.answer(f"‚òëÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ <b>–æ—Ç 1 –¥–æ {len(vars)}</b>", reply_markup=ikb_back(), parse_mode=ParseMode.HTML) #todo –ø—Ä–æ–ø–∏—Å–∞—Ç—å –±—ç–∫ –¥–ª—è Current.corect
        else:
            await message.answer("‚ùå–í–∞—Ä–∏–∞–Ω—Ç—ã –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –°–ø–µ—Ä–≤–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞", ikb_actions_qustion())
            await state.set_state(Current.event)
    except:
        await message.answer(f"‚òëÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ <b>–æ—Ç 1 –¥–æ {len(vars)}</b>", reply_markup=ikb_back(), parse_mode=ParseMode.HTML)

async def get_unique_value(values):
    for i in range(10000):
        if i not in values:
            return i

    return None


@router.callback_query(Current.event, F.data =="ikb_add_question_test")
async def second(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    quest = data.get("question")
    vars = data.get("variants")
    correct = data.get("correct")
    test_id = data.get("current_test")
    types = data.get("type")
    all_quests = await questions.get_all_quest()

    if quest and vars and correct:
        try:
            await questions.add_test(id_test=test_id, id_quest=len(all_quests)+1, correct_answer=correct, quest_type=types, variants=vars, text=quest)
            await query.message.answer("‚úÖ–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
            kb = await ikb_all_questions(test_id)
            await query.message.answer("‚ö°–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤", reply_markup=kb)
            await state.update_data(question='')
            await state.update_data(variants='')
            await state.update_data(correct='')
            await state.update_data(type='')
            await state.set_state(Current.current_test)
        except Exception as err:
            await log_exceptions1("create_quest_1", "ERROR", "first.py", 230, err, query.from_user.id)

            await query.message.answer("‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            kb = await ikb_all_questions(test_id)
            await query.message.answer("‚ö°–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤‚ö°", reply_markup=kb)
    else:
        await query.message.answer(f"""‚õî–í—ã –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –æ–¥–Ω–æ –∏–∑ –ø–æ–ª–µ–π:
–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ - {quest if quest else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ"}
–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ - {vars if vars else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"}
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ - {correct if correct else "‚ùå–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"}""",  reply_markup=ikb_actions_qustion())