from aiogram.enums import ParseMode
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram import types
from aiogram.filters import Command

from filters.Old_User import Old_user
from filters.is_admin import Admin
from filters.is_new_user import New_User
from keyboard.users_kb.ikb_start import ikb_start
from loader import bot
from set_logs1.logger_all1 import log_exceptions1
from utils.db_api.quck_commands import event, admins
from aiogram.fsm.context import FSMContext
from keyboard.ikb_buy_admin import ikb_buy_admin, Choose_price
import config


router = Router()
packages = [[1], [4]]
PRICE1 = types.LabeledPrice(label="üåü –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞ —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –Ω–∞ 7 –¥–Ω–µ–π - 300 —Ä—É–±–ª–µ–π (–ø–∞–∫–µ—Ç 1)", amount=300*100)  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö (—Ä—É–±)
PRICE2 = types.LabeledPrice(label="üëë –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞ —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –Ω–∞ 28 –¥–Ω–µ–π - 1000 —Ä—É–±–ª–µ–π (–ø–∞–∫–µ—Ç 2)", amount=1000*100)  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö (—Ä—É–±)
prices = list([PRICE1, PRICE2])

@router.message(Command("buy"), Old_user())
async def first(message: Message):
    await message.answer("""üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –¥–æ—Ä–æ–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–µ–¥–ª–∞–≥–∞—é –≤–∞–º –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ—Å—Ç—ã –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è

üõí–ü—Ä–∞–π—Å –ª–∏—Å—Ç:
üåü –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞ —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –Ω–∞ 7 –¥–Ω–µ–π
üëë –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞ —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –Ω–∞ 30 –¥–Ω–µ–π 
""", reply_markup=ikb_buy_admin(), parse_mode=ParseMode.HTML)


@router.message(Command("buy"), Admin())
async def first(message: Message):
    await message.answer("""üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –¥–æ—Ä–æ–≥–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ø—Ä–µ–¥–ª–∞–≥–∞—é –≤–∞–º –ø—Ä–æ–¥–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–∏—Å

üõí–ü—Ä–∞–π—Å –ª–∏—Å—Ç:
üåü –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞ —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –Ω–∞ 7 –¥–Ω–µ–π
üëë –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞ —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –Ω–∞ 30 –¥–Ω–µ–π """, reply_markup=ikb_buy_admin(), parse_mode=ParseMode.HTML)



@router.message(Command("buy"), New_User())
async def first(message: Message):
    await message.answer("‚ùå –ü–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", reply_markup=ikb_start())


@router.callback_query(Choose_price.filter(F.cb=="ikb_buy"))
async def second(query: CallbackQuery, callback_data: Choose_price, state: FSMContext):
    if config.PAYMENTS_TOKEN.split(':')[1] == 'TEST':
        await bot.send_message(query.message.chat.id, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂")
    await bot.send_invoice(query.message.chat.id,
                           title=f"""{str(packages[callback_data.id-1][0]) + " –Ω–µ–¥–µ–ª—é" if packages[callback_data.id-1][0] == 1 else str(packages[callback_data.id-1][0]) + " –Ω–µ–¥–µ–ª–∏"} –ø–æ–¥–ø–∏—Å–∫–∏""",
                           description=f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞ –ø–æ {callback_data.id} - –æ–º—É –ø–∞–∫–µ—Ç—É",
                           provider_token=config.PAYMENTS_TOKEN,
                           currency="rub",
                           photo_url="https://www.aroged.com/wp-content/uploads/2022/06/Telegram-has-a-premium-subscription.jpg",
                           photo_width=416,
                           photo_height=234,
                           photo_size=416,
                           is_flexible=False,
                           prices=[prices[callback_data.id-1]],
                           start_parameter="one-month-subscription",
                           payload=f"{callback_data.id}",
                           disable_notification=False)


# pre checkout  (must be answered in 10 seconds)
@router.pre_checkout_query()
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)
    print(pre_checkout_q)


# successful payment
@router.message(F.successful_payment)
async def successful_payment(message:Message):
    print("SUCCESSFUL PAYMENT")
    payment_info = message.successful_payment
    print("INFO - ", packages[int(payment_info.invoice_payload)])
    response = await admins.successful_pay(message=message, package=packages[int(payment_info.invoice_payload)]) #TODO —Ä–µ—Å–ø–æ–Ω—Å–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–æ –Ω–∏—Ö—É—è –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è –µ—Å–ª–∏ —Ç—ã —É–∂–µ –∞–¥–º–∏–Ω
    if response:
        await bot.send_message(message.chat.id, f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
        resp = [payment_info.invoice_payload, message.successful_payment.total_amount // 100]
        await admins.mail_to_admins(resp)
        await log_exceptions1("sucessfull_pay", "INFO", "buy_admin.py", 125, "sucessful_pay", message.from_user.id)

